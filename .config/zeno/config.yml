snippets:
  # snippet and keyword abbrev
  - name: git status
    keyword: gs
    snippet: git status --short --branch

  # snippet with placeholder
  - name: git commit message
    keyword: gcim
    snippet: git commit -m '{{commit_message}}'

  - keyword: proot
    snippet: cd $(git rev-parse --show-toplevel)

  - name: "null"
    keyword: "null"
    snippet: ">/dev/null 2>&1"
    # auto expand condition
    # If not defined, it is only valid at the beginning of a line.
    context:
      # buffer: ''
      lbuffer: '.+\s'
      # rbuffer: ''

  - name: branch
    keyword: B
    snippet: git symbolic-ref --short HEAD
    context:
      lbuffer: '^git\s+checkout\s+'
    evaluate: true # eval snippet

  - name: today
    keyword: td
    snippet: date +%Y-%m-%d
    evaluate: true

  - name: copy
    keyword: CC
    snippet: "| pbcopy"
    context:
      lbuffer: '.+\s'

  - name: cd there
    keyword: CD
    snippet: "&& cd $_"
    context:
      lbuffer: '.+\s'

  - keyword: G
    snippet: '| grep'
    context:
      lbuffer: '.+\s'
 
  - keyword: '-'
    snippet: cd -

  - keyword: proot
    snippet: 'cd $(git rev-parse --show-toplevel)'

  - keyword: ll
    snippet: ls -l

  - keyword: la
    snippet: ls -a

  - keyword: lla
    snippet: ls -la

  - keyword: r
    snippet: exec $SHELL -l

  - keyword: myip
    snippet: curl ifconfig.me

  - keyword: dhosts
    snippet: nvim ~/.ssh/conf.d/hosts/

  - keyword: hosts
    snippet: sudo nvim /etc/hosts

  - keyword: zenn
    snippet: nvim ~/src/private/zenn

  - keyword: g
    snippet: git

  - keyword: gs
    snippet: git status

  - keyword: gsw
    snippet: git switch

  - keyword: gpl
    snippet: git pull

  - keyword: gfe
    snippet: git fetch

  - keyword: lg
    snippet: lazygit

  - keyword: mul
    snippet: multipass

  - keyword: ap
    snippet: ansible-playbook

  - keyword: anv
    snippet: ansible-valut

  - keyword: tf
    snippet: terraform

  - keyword: ap
    snippet: apply
    context:
      lbuffer: '^terraform\s+'

  - keyword: pl
    snippet: plan
    context:
      lbuffer: '^terraform\s+'

  - keyword: in
    snippet: init
    context:
      lbuffer: '^terraform\s+'

  - keyword: st
    snippet: state
    context:
      lbuffer: '^terraform\s+'

  - keyword: stl
    snippet: state list
    context:
      lbuffer: '^terraform\s+'

  - keyword: awsl
    snippet: aws configure list

  - keyword: py
    snippet: python3

  - keyword: upy
    snippet: uv run python

  - keyword: f
    snippet: open .

  - keyword: vpn
    snippet: vpnutil

  - keyword: ld
    snippet: lazydocker

  - keyword: ghc
    snippet: gh repo create '{{repo_name}}' --private

  - keyword: instance-connect
    snippet: aws ec2-instance-connect ssh --instance-id {{instance-id}} --os-user ec2-user

  - keyword: ic;
    snippet: aws ec2-instance-connect ssh --instance-id {{instance-id}} --os-user {{ec2-user}}

  - keyword: smg;
    snippet: aws secretsmanager get-secret-value --secret-id {{env-HogePassword}} --query SecretString --output text

    # Claude Code
  - keyword: cc
    snippet: claude -c
  - keyword: serena
    snippet: claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context ide-assistant --project $(pwd)

  - keyword: serena-init
    snippet: mcp__serena__initial_instructions

  - keyword: cs;
    snippet: claude --append-system-prompt $(uvx --from git+https://github.com/oraios/serena serena print-system-prompt)

  - name: npm
    keyword: npm
    snippet: zsh -c "$HOME/.config/zeno/scripts/package-manager.ts"
    evaluate: true

completions:
  # simple sourceCommand, no callback
  - name: kill signal
    patterns:
      - "^kill -s $"
    sourceCommand: "kill -l | tr ' ' '\\n'"
    options:
      --prompt: "'Kill Signal> '"

  # use excludePatterns and callback
  - name: kill pid
    patterns:
      - "^kill( .*)? $"
    excludePatterns:
      # -l, -n or -s is followed by SIGNAL instead of PID
      - " -[lns] $"
    sourceCommand: "LANG=C ps -ef | sed 1d"
    options:
      --multi: true
      --prompt: "'Kill Process> '"
    callback: "awk '{print $2}'"

  # Use null (\0) termination Input / Output
  - name: chdir
    patterns:
      - "^;cd $"
    sourceCommand: "find . -path '*/.git' -prune -o -maxdepth 5 -type d -print0"
    options:
      # Added --read0 if null termination is used in `sourceCommand` output.
      --read0: true
      --prompt: "'Chdir> '"
      --preview: "cd {} && ls -a | sed '/^[.]*$/d'"
    callback: "cut -z -c 3-"
    callbackZero: true  # null termination is used in `callback` I/O

  - name: ssh login
    patterns:
      - "^ssh(?: .*)? $"
    sourceCommand: |
      cat "$HOME/.ssh/conf.d/hosts/"**/*(.) | grep -E '^HOST\s' | grep -v '\*' | awk '{print $2}' | sort -u
    options:
      --prompt: "'ssh > '"

  - name: package scripts
    patterns:
      - "npm run(?: .*)? $"
      - "yarn run(?: .*)? $"
      - "pnpm run(?: .*)? $"
      - "bun run(?: .*)? $"
    sourceCommand: 'jq -r ''.scripts | to_entries | .[] | .key + " = " + .value'' package.json'
    options:
      --prompt: "'npm run > '"
    callback: "awk -F ' = ' '{ print $1 }'"

  - name: nb edit
    patterns:
      - "^nb e( .*)? $"
      - "^nb edit( .*)? $"
    sourceCommand: "nb ls --no-color | grep -E '^\\[[0-9]+\\]'"
    options:
      --prompt: "'nb edit >'"
      --preview: "echo {} | sed -E 's/^\\[([0-9]+)\\].*/\\1/' | xargs nb show"
    callback: "sed -E 's/^\\[([0-9]+)\\].*/\\1/'"

  - name: gh browse
    patterns:
      - "^gh browse -R( .*)? $"
    sourceCommand: "gh repo list --visibility=public | awk '{print $1}'"
    options:
      --prompt: "'browse repo >'"

  - name: ghq get
    patterns:
      - "^ghqg"
      - "^ghq get( .*)? $"
    sourceCommand: "gh repo list | awk '{print $1}'"
    options:
      --prompt: "'browse repo >'"
    callback: "ghq get ${1}"

  - name: instance-id
    patterns:
      - "aws ec2-instance-connect ssh --instance-id( .*)?"
    sourceCommand: "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId, Tags[?Key==`Name`].Value | [0]]' --output text"
    callback: "awk -F ' ' '{ print $1 }'"

  - name: Makefile
    patterns:
      - "^make( .*)? $"
    sourceCommand: 'make help | sed -E "s/\x1b\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[mGK]//g"'
    callback: "awk '{printf $2}'"
    options:
      --prompt: "'make> '"

  - name: suspend
    patterns:
      - "^fg $"
    sourceCommand: "jobs"
    callback: "cut -d'[' -f2 | cut -d']' -f1 | sed 's/^/%/'"
