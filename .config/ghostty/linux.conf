# Put every surface (tab, split, window) into a dedicated Linux cgroup.
# 
# This makes it so that resource management can be done on a per-surface
# granularity. For example, if a shell program is using too much memory,
# only that shell will be killed by the oom monitor instead of the entire
# Ghostty process. Similarly, if a shell program is using too much CPU,
# only that surface will be CPU-throttled.
# 
# This will cause startup times to be slower (a hundred milliseconds or so),
# so the default value is "single-instance." In single-instance mode, only
# one instance of Ghostty is running (see gtk-single-instance) so the startup
# time is a one-time cost. Additionally, single instance Ghostty is much
# more likely to have many windows, tabs, etc. so cgroup isolation is a
# big benefit.
# 
# This feature requires systemd. If systemd is unavailable, cgroup
# initialization will fail. By default, this will not prevent Ghostty
# from working (see linux-cgroup-hard-fail).
# 
# Valid values are:
# 
#   * `never` - Never use cgroups.
#   * `always` - Always use cgroups.
#   * `single-instance` - Enable cgroups only for Ghostty instances launched
#     as single-instance applications (see gtk-single-instance).
# 
linux-cgroup = single-instance

# Memory limit for any individual terminal process (tab, split, window,
# etc.) in bytes. If this is unset then no memory limit will be set.
# 
# Note that this sets the "memory.high" configuration for the memory
# controller, which is a soft limit. You should configure something like
# systemd-oom to handle killing processes that have too much memory
# pressure.
linux-cgroup-memory-limit = 

# Number of processes limit for any individual terminal process (tab, split,
# window, etc.). If this is unset then no limit will be set.
# 
# Note that this sets the "pids.max" configuration for the process number
# controller, which is a hard limit.
linux-cgroup-processes-limit = 

# If this is false, then any cgroup initialization (for linux-cgroup)
# will be allowed to fail and the failure is ignored. This is useful if
# you view cgroup isolation as a "nice to have" and not a critical resource
# management feature, because Ghostty startup will not fail if cgroup APIs
# fail.
# 
# If this is true, then any cgroup initialization failure will cause
# Ghostty to exit or new surfaces to not be created.
# 
# Note: This currently only affects cgroup initialization. Subprocesses
# must always be able to move themselves into an isolated cgroup.
linux-cgroup-hard-fail = false
