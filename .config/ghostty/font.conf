# The font families to use.
# 
# You can generate the list of valid values using the CLI:
# 
#     ghostty +list-fonts
# 
# This configuration can be repeated multiple times to specify preferred
# fallback fonts when the requested codepoint is not available in the primary
# font. This is particularly useful for multiple languages, symbolic fonts,
# etc.
# 
# Notes on emoji specifically: On macOS, Ghostty by default will always use
# Apple Color Emoji and on Linux will always use Noto Emoji. You can
# override this behavior by specifying a font family here that contains
# emoji glyphs.
# 
# The specific styles (bold, italic, bold italic) do not need to be
# explicitly set. If a style is not set, then the regular style (font-family)
# will be searched for stylistic variants. If a stylistic variant is not
# found, Ghostty will use the regular style. This prevents falling back to a
# different font family just to get a style such as bold. This also applies
# if you explicitly specify a font family for a style. For example, if you
# set `font-family-bold = FooBar` and "FooBar" cannot be found, Ghostty will
# use whatever font is set for `font-family` for the bold style.
# 
# Finally, some styles may be synthesized if they are not supported.
# For example, if a font does not have an italic style and no alternative
# italic font is specified, Ghostty will synthesize an italic style by
# applying a slant to the regular style. If you want to disable these
# synthesized styles then you can use the `font-style` configurations
# as documented below.
# 
# You can disable styles completely by using the `font-style` set of
# configurations. See the documentation for `font-style` for more information.
# 
# If you want to overwrite a previous set value rather than append a fallback,
# specify the value as `""` (empty string) to reset the list and then set the
# new values. For example:
# 
#     font-family = ""
#     font-family = "My Favorite Font"
# 
# Setting any of these as CLI arguments will automatically clear the
# values set in configuration files so you don't need to specify
# `--font-family=""` before setting a new value. You only need to specify
# this within config files if you want to clear previously set values in
# configuration files or on the CLI if you want to clear values set on the
# CLI.
# 
# Changing this configuration at runtime will only affect new terminals, i.e.
# new windows, tabs, etc.
font-family = "HackGen Console NF"

font-family-bold = 
font-family-italic = 
font-family-bold-italic = 
# The named font style to use for each of the requested terminal font styles.
# This looks up the style based on the font style string advertised by the
# font itself. For example, "Iosevka Heavy" has a style of "Heavy".
# 
# You can also use these fields to completely disable a font style. If you set
# the value of the configuration below to literal `false` then that font style
# will be disabled. If the running program in the terminal requests a disabled
# font style, the regular font style will be used instead.
# 
# These are only valid if its corresponding font-family is also specified.
font-style = default

font-style-bold = default
font-style-italic = default
font-style-bold-italic = default
# Control whether Ghostty should synthesize a style if the requested style is
# not available in the specified font-family.
# 
# Ghostty can synthesize bold, italic, and bold italic styles if the font
# does not have a specific style. For bold, this is done by drawing an
# outline around the glyph of varying thickness. For italic, this is done by
# applying a slant to the glyph. For bold italic, both of these are applied.
# 
# Synthetic styles are not perfect and will generally not look as good
# as a font that has the style natively. However, they are useful to
# provide styled text when the font does not have the style.
# 
# Set this to "false" or "true" to disable or enable synthetic styles
# completely. You can disable specific styles using "no-bold", "no-italic",
# and "no-bold-italic". You can disable multiple styles by separating them
# with a comma. For example, "no-bold,no-italic".
# 
# Available style keys are: `bold`, `italic`, `bold-italic`.
# 
# If synthetic styles are disabled, then the regular style will be used
# instead if the requested style is not available. If the font has the
# requested style, then the font will be used as-is since the style is
# not synthetic.
# 
# Warning: An easy mistake is to disable `bold` or `italic` but not
# `bold-italic`. Disabling only `bold` or `italic` will NOT disable either
# in the `bold-italic` style. If you want to disable `bold-italic`, you must
# explicitly disable it. You cannot partially disable `bold-italic`.
# 
# By default, synthetic styles are enabled.
font-synthetic-style = bold,italic,bold-italic

# Apply a font feature. To enable multiple font features you can repeat
# this multiple times or use a comma-separated list of feature settings.
# 
# The syntax for feature settings is as follows, where `feat` is a feature:
# 
#   * Enable features with e.g. `feat`, `+feat`, `feat on`, `feat=1`.
#   * Disabled features with e.g. `-feat`, `feat off`, `feat=0`.
#   * Set a feature value with e.g. `feat=2`, `feat = 3`, `feat 4`.
#   * Feature names may be wrapped in quotes, meaning this config should be
#     syntactically compatible with the `font-feature-settings` CSS property.
# 
# The syntax is fairly loose, but invalid settings will be silently ignored.
# 
# The font feature will apply to all fonts rendered by Ghostty. A future
# enhancement will allow targeting specific faces.
# 
# To disable programming ligatures, use `-calt` since this is the typical
# feature name for programming ligatures. To look into what font features
# your font has and what they do, use a font inspection tool such as
# [fontdrop.info](https://fontdrop.info).
# 
# To generally disable most ligatures, use `-calt, -liga, -dlig`.
font-feature = 

# Font size in points. This value can be a non-integer and the nearest integer
# pixel size will be selected. If you have a high dpi display where 1pt = 2px
# then you can get an odd numbered pixel size by specifying a half point.
# 
# For example, 13.5pt @ 2px/pt = 27px
# 
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc. Note that you may still not see the change
# depending on your `window-inherit-font-size` setting. If that setting is
# true, only the first window will be affected by this change since all
# subsequent windows will inherit the font size of the previous window.
# 
# On Linux with GTK, font size is scaled according to both display-wide and
# text-specific scaling factors, which are often managed by your desktop
# environment (e.g. the GNOME display scale and large text settings).
font-size = 13

# A repeatable configuration to set one or more font variations values for
# a variable font. A variable font is a single font, usually with a filename
# ending in `-VF.ttf` or `-VF.otf` that contains one or more configurable axes
# for things such as weight, slant, etc. Not all fonts support variations;
# only fonts that explicitly state they are variable fonts will work.
# 
# The format of this is `id=value` where `id` is the axis identifier. An axis
# identifier is always a 4 character string, such as `wght`. To get the list
# of supported axes, look at your font documentation or use a font inspection
# tool.
# 
# Invalid ids and values are usually ignored. For example, if a font only
# supports weights from 100 to 700, setting `wght=800` will do nothing (it
# will not be clamped to 700). You must consult your font's documentation to
# see what values are supported.
# 
# Common axes are: `wght` (weight), `slnt` (slant), `ital` (italic), `opsz`
# (optical size), `wdth` (width), `GRAD` (gradient), etc.
font-variation = 

font-variation-bold = 
font-variation-italic = 
font-variation-bold-italic = 
# Force one or a range of Unicode codepoints to map to a specific named font.
# This is useful if you want to support special symbols or if you want to use
# specific glyphs that render better for your specific font.
# 
# The syntax is `codepoint=fontname` where `codepoint` is either a single
# codepoint or a range. Codepoints must be specified as full Unicode
# hex values, such as `U+ABCD`. Codepoints ranges are specified as
# `U+ABCD-U+DEFG`. You can specify multiple ranges for the same font separated
# by commas, such as `U+ABCD-U+DEFG,U+1234-U+5678=fontname`. The font name is
# the same value as you would use for `font-family`.
# 
# This configuration can be repeated multiple times to specify multiple
# codepoint mappings.
# 
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.
font-codepoint-map = 

# Draw fonts with a thicker stroke, if supported.
# This is currently only supported on macOS.
font-thicken = false

# Strength of thickening when `font-thicken` is enabled.
# 
# Valid values are integers between `0` and `255`. `0` does not correspond to
# *no* thickening, rather it corresponds to the lightest available thickening.
# 
# Has no effect when `font-thicken` is set to `false`.
# 
# This is currently only supported on macOS.
font-thicken-strength = 255

# What color space to use when performing alpha blending.
# 
# This affects the appearance of text and of any images with transparency.
# Additionally, custom shaders will receive colors in the configured space.
# 
# Valid values:
# 
# * `native` - Perform alpha blending in the native color space for the OS.
#   On macOS this corresponds to Display P3, and on Linux it's sRGB.
# 
# * `linear` - Perform alpha blending in linear space. This will eliminate
#   the darkening artifacts around the edges of text that are very visible
#   when certain color combinations are used (e.g. red / green), but makes
#   dark text look much thinner than normal and light text much thicker.
#   This is also sometimes known as "gamma correction".
#   (Currently only supported on macOS. Has no effect on Linux.)
# 
# * `linear-corrected` - Same as `linear`, but with a correction step applied
#   for text that makes it look nearly or completely identical to `native`,
#   but without any of the darkening artifacts.
alpha-blending = native

# The method to use for calculating the cell width of a grapheme cluster.
# The default value is `unicode` which uses the Unicode standard to determine
# grapheme width. This results in correct grapheme width but may result in
# cursor-desync issues with some programs (such as shells) that may use a
# legacy method such as `wcswidth`.
# 
# Valid values are:
# 
# * `legacy` - Use a legacy method to determine grapheme width, such as
#   wcswidth This maximizes compatibility with legacy programs but may result
#   in incorrect grapheme width for certain graphemes such as skin-tone
#   emoji, non-English characters, etc.
# 
#   This is called "legacy" and not something more specific because the
#   behavior is undefined and we want to retain the ability to modify it.
#   For example, we may or may not use libc `wcswidth` now or in the future.
# 
# * `unicode` - Use the Unicode standard to determine grapheme width.
# 
# If a running program explicitly enables terminal mode 2027, then `unicode`
# width will be forced regardless of this configuration. When mode 2027 is
# reset, this configuration will be used again.
# 
# This configuration can be changed at runtime but will not affect existing
# terminals. Only new terminals will use the new configuration.
grapheme-width-method = unicode

# FreeType load flags to enable. The format of this is a list of flags to
# enable separated by commas. If you prefix a flag with `no-` then it is
# disabled. If you omit a flag, its default value is used, so you must
# explicitly disable flags you don't want. You can also use `true` or `false`
# to turn all flags on or off.
# 
# This configuration only applies to Ghostty builds that use FreeType.
# This is usually the case only for Linux builds. macOS uses CoreText
# and does not have an equivalent configuration.
# 
# Available flags:
# 
#   * `hinting` - Enable or disable hinting, enabled by default.
#   * `force-autohint` - Use the freetype auto-hinter rather than the
#     font's native hinter. Enabled by default.
#   * `monochrome` - Instructs renderer to use 1-bit monochrome
#     rendering. This option doesn't impact the hinter.
#     Enabled by default.
#   * `autohint` - Use the freetype auto-hinter. Enabled by default.
# 
# Example: `hinting`, `no-hinting`, `force-autohint`, `no-force-autohint`
freetype-load-flags = hinting,force-autohint,monochrome,autohint
